<div id="main">
  <p class="main_header">Google Calendar</p>

  <!--Add buttons to initiate auth sequence and sign out-->
  <button
    class="main_btn bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow"
    id="authorize_button" style="display: none;">Log In</button>
  <button
    class="main_btn bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow"
    id="signout_button" style="display: none;">Sign Out</button>

  <div id="content" style="white-space: div-wrap;">
    </pre>
  </div>

  <script type="text/javascript">
    const pre = document.getElementById("content");
    const CLIENT_ID = "{{clientID}}";
    const API_KEY = "{{apiKey}}";
    const days = [
      { name: 'Sunday', backgroundColor: '#eae2b7', color: 'black' },
      { name: 'Monday', backgroundColor: '#003049', color: 'white' },
      { name: 'Tuesday', backgroundColor: '#d62828', color: 'white' },
      { name: 'Wednesday', backgroundColor: '#f77f00', color: 'white' },
      { name: 'Thurday', backgroundColor: '#fcbf49', color: 'black' },
      { name: 'Friday', backgroundColor: '#ff3c38 ', color: 'white' },
      { name: 'Saturday', backgroundColor: '#c0d6df', color: 'black' },
    ];

    // Array of API discovery doc URLs for APIs used by the quickstart
    var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];

    // Authorization scopes required by the API; multiple scopes can be
    // included, separated by spaces.
    var SCOPES = "https://www.googleapis.com/auth/calendar.readonly";

    var authorizeButton = document.getElementById('authorize_button');
    var signoutButton = document.getElementById('signout_button');

    /**
     *  On load, called to load the auth2 library and API client library.
     */
    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    /**
     *  Initializes the API client library and sets up sign-in state
     *  listeners.
     */
    function initClient() {
      gapi.client.init({
        apiKey: API_KEY,
        clientId: CLIENT_ID,
        discoveryDocs: DISCOVERY_DOCS,
        scope: SCOPES
      }).then(function () {
        // Listen for sign-in state changes.
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

        // Handle the initial sign-in state.
        updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
        authorizeButton.onclick = handleAuthClick;
        signoutButton.onclick = handleSignoutClick;
      }, function (error) {
        appendPre(JSON.stringify(error, null, 2));
      });
    }

    /**
     *  Called when the signed in status changes, to update the UI
     *  appropriately. After a sign-in, the API is called.
     */
    function updateSigninStatus(isSignedIn) {
      if (isSignedIn) {
        authorizeButton.style.display = 'none';
        signoutButton.style.display = 'block';
        listUpcomingEvents();
      } else {
        authorizeButton.style.display = 'block';
        signoutButton.style.display = 'none';
      }
    }

    /**
     *  Sign in the user upon button click.
     */
    function handleAuthClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    /**
     *  Sign out the user upon button click.
     */
    function handleSignoutClick(event) {
      pre.innerHTML = "";
      gapi.auth2.getAuthInstance().signOut();
    }

    /**
     * Append a pre element to the body containing the given message
     * as its text node. Used to display the results of the API call.
     *
     * @param {HTMLElement} elem Element to be placed in pre element.
     */
    function appendPre(elem) {
      pre.innerHTML += elem;
    }

    /**
     * Print the summary and start datetime/date of the next ten events in
     * the authorized user's calendar. If no events are found an
     * appropriate message is printed.
     */
    function listUpcomingEvents() {
      gapi.client.calendar.events.list({
        'calendarId': 'primary',
        'showDeleted': false,
        'singleEvents': true,
        'timeMin': (new Date()).toISOString(),
        'orderBy': 'startTime'
      }).then(function (response) {
        var events = response.result.items;
        if (events.length > 0) {
          // filterTodaysEvents(events)
          appendPre('Upcoming events:');
          pre.innerHTML = ""
          for (i = 0; i < events.length; i++) {
            var event = events[i];
            var when = event.start.dateTime;
            if (!when) {
              when = event.start.date;
            }
            const day = days[new Date(when).getDay()];
            appendPre(`<div class="content_event" style="background-color: ${day.backgroundColor}; color: ${day.color};">${event.summary + ' (' + day.name + when + ')'}</div>`)
          }
        } else {
          appendPre('No upcoming events found.');
        }
      });
    }

    /**
     * Return events that are happening today!
     * @param {Array} events Events
     */
    function filterTodaysEvents(events) {
      const date = new Date();
      const now = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`
      const todaysEvents = events.filter(e => {
        const eventTime = e.start.dateTime.split('T')[0];
        if (eventTime === now) {
          return e;
        };
      });
      if (todaysEvents.length < 0) {
        console.log('No events today.')
      } else {
        console.log(`You got ${todaysEvents.length} events today!`);
      }
    }
  </script>

  <script async defer src="https://apis.google.com/js/api.js" onload="this.onload=function(){};handleClientLoad()"
    onreadystatechange="if (this.readyState === 'complete') this.onload()"></script>