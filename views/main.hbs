<div id="main">
  <p class="main_header">Google Calendar</p>
  <button
    class="main_btn bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow"
    id="authorize_button" style="display: none;">Log In</button>
  <button
    class="main_btn bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow"
    id="signout_button" style="display: none;">Sign Out</button>
  <div id="content" style="white-space: div-wrap;">
  </div>
</div>

<script type="text/javascript">
  const pre = document.getElementById("content");
  const CLIENT_ID = "{{clientID}}";
  const API_KEY = "{{apiKey}}";
  const days = [
    { name: 'Sunday', backgroundColor: '#ba672c' },
    { name: 'Monday', backgroundColor: '#004e64' },
    { name: 'Tuesday', backgroundColor: '#3ab795' },
    { name: 'Wednesday', backgroundColor: '#008bf8' },
    { name: 'Thurday', backgroundColor: '#ba1200' },
    { name: 'Friday', backgroundColor: '#8f2d56 ' },
    { name: 'Saturday', backgroundColor: '#240b36' },
  ];

  const DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];
  const SCOPES = "https://www.googleapis.com/auth/calendar.readonly";
  const authorizeButton = document.getElementById('authorize_button');
  const signoutButton = document.getElementById('signout_button');

  /**
   *  On load, called to load the auth2 library and API client library.
   */
  function handleClientLoad() {
    gapi.load('client:auth2', initClient);
  }

  /**
   *  Initializes the API client library and sets up sign-in state
   *  listeners.
   */
  function initClient() {
    gapi.client.init({
      apiKey: API_KEY,
      clientId: CLIENT_ID,
      discoveryDocs: DISCOVERY_DOCS,
      scope: SCOPES
    }).then(function () {
      // Listen for sign-in state changes.
      gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

      // Handle the initial sign-in state.
      updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      authorizeButton.onclick = handleAuthClick;
      signoutButton.onclick = handleSignoutClick;
    }, function (error) {
      appendPre(JSON.stringify(error, null, 2));
    });
  }

  /**
   *  Called when the signed in status changes, to update the UI
   *  appropriately. After a sign-in, the API is called.
   */
  function updateSigninStatus(isSignedIn) {
    if (isSignedIn) {
      authorizeButton.style.display = 'none';
      signoutButton.style.display = 'block';
      listUpcomingEvents();
    } else {
      authorizeButton.style.display = 'block';
      signoutButton.style.display = 'none';
    }
  }

  /**
   *  Sign in the user upon button click.
   */
  function handleAuthClick(event) {
    gapi.auth2.getAuthInstance().signIn();
  }

  /**
   *  Sign out the user upon button click.
   */
  function handleSignoutClick(event) {
    pre.innerHTML = "";
    pre.style.display = "block";
    gapi.auth2.getAuthInstance().signOut();
  }

  /**
   * Append a pre element to the body containing the given message
   * as its text node. Used to display the results of the API call.
   *
   * @param {HTMLElement} elem Element to be placed in pre element.
   */
  function appendPre(elem) {
    pre.innerHTML += elem;
  }

  /**
   * Print the summary and start datetime/date of the next ten events in
   * the authorized user's calendar. If no events are found an
   * appropriate message is printed.
   */
  function listUpcomingEvents() {
    gapi.client.calendar.events.list({
      'calendarId': 'primary',
      'showDeleted': false,
      'singleEvents': true,
      'timeMin': (new Date()).toISOString(),
      'orderBy': 'startTime'
    }).then(function (response) {
      const events = response.result.items;
      if (events.length > 0) {
        appendPre('Upcoming events:');
        pre.style.display = 'grid';
        pre.innerHTML = ""
        for (i = 0; i < events.length; i++) {
          const event = events[i];
          const when = event.start.dateTime;
          if (!when) {
            when = event.start.date;
          }
          const day = days[new Date(when).getDay()];
          const date = when.split("T")[0].split("-");
          appendPre(
            `<div class="content_event" style="background-color: ${day.backgroundColor};">
                  <p class="content_event_day">${day.name}</p>
                  <p class="content_event_date">${date[1]}/${date[2]}/${date[0]}</p>
                  <p class="content_event_title">${event.summary}</p>
                  <p class="content_event_desc">${event.description ? event.description : "No event description"}</p>
                  <a class="content_event_link" href=${event.htmlLink} target="_blank">More details</a>
               </div>`
          )
        }
      } else {
        appendPre(
          `<div class="content_event content_event--empty">
              <p class="content_event_desc">No events found</p>
             </div>`
        );
      }
    });
  }
</script>

<script async defer src="https://apis.google.com/js/api.js" onload="this.onload=function(){};handleClientLoad()"
  onreadystatechange="if (this.readyState === 'complete') this.onload()"></script>